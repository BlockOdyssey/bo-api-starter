#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-boiler-plate:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3000');
var tlsPort = normalizePort('3001');
app.set('port', port);
app.set('tlsPort', tlsPort);

var options = {
  // key: fs.readFileSync(path.resolve(__dirname,'../certkey/key.key')),
  // cert: fs.readFileSync(path.resolve(__dirname,'../certkey/cert.crt'))
};

var httpServer = http.createServer(app);
var httpsServer = https.createServer(options, app);

httpServer.listen(port,()=> console.log(port));
httpsServer.listen(tlsPort,()=> console.log(tlsPort));

httpServer.on('error', onError);
httpServer.on('listening', onHttpListening);
httpsServer.on('error', onError);
httpsServer.on('listening', onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onHttpsListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
